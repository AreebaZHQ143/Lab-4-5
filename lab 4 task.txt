using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace LexicalAnalyzerConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            // Taking user input from the console
            Console.WriteLine("Enter the code to analyze (Press Enter twice to finish):");
            string userInput = "";
            string line;
            while ((line = Console.ReadLine()) != "")
            {
                userInput += line + "\n"; // Collecting multi-line input
            }

            // List of keywords to separate keywords from variables
            List<String> keywordList = new List<String>
            {
                "int", "float", "while", "main", "if", "else", "new"
            };

            // Line number counter
            int line_num = 0;

            // Input Buffering
            List<String> finalArray = new List<String>();
            List<String> finalArrayc = new List<String>();
            List<char> tempArray = new List<char>();
            char[] charinput = userInput.ToCharArray();

            // Regular Expressions for Variables, Constants, Operators, Special Characters
            Regex variable_Reg = new Regex(@"^[A-Za-z|_][A-Za-z|0-9]*$");
            Regex constants_Reg = new Regex(@"^[0-9]+([.][0-9]+)?([e]([+|-])?[0-9]+)?$");
            Regex operators_Reg = new Regex(@"^[-*+/><&&||=]$");
            Regex special_Reg = new Regex(@"^[.,'\[\]{}();:?]$");

            // Processing the input and identifying lexemes
            for (int itr = 0; itr < charinput.Length; itr++)
            {
                Match match_Variable = variable_Reg.Match(charinput[itr] + "");
                Match match_Constant = constants_Reg.Match(charinput[itr] + "");
                Match match_Operator = operators_Reg.Match(charinput[itr] + "");
                Match match_Special = special_Reg.Match(charinput[itr] + "");

                if (match_Variable.Success || match_Constant.Success || match_Operator.Success || match_Special.Success || charinput[itr].Equals(' '))
                {
                    tempArray.Add(charinput[itr]);
                }

                // When newline character is encountered, process the lexemes for the current line
                if (charinput[itr].Equals('\n'))
                {
                    if (tempArray.Count != 0)
                    {
                        String fin = new string(tempArray.ToArray());
                        finalArray.Add(fin);
                        tempArray.Clear();
                    }
                }
            }

            // Process the remaining lexemes if any
            if (tempArray.Count != 0)
            {
                String fin = new string(tempArray.ToArray());
                finalArray.Add(fin);
                tempArray.Clear();
            }

            // Looping through all lines in user input
            foreach (string lineContent in finalArray)
            {
                char[] lineChar = lineContent.ToCharArray();
                line_num++;

                // Splitting the line into lexemes by spaces or special characters
                for (int itr = 0; itr < lineChar.Length; itr++)
                {
                    Match match_Variable = variable_Reg.Match(lineChar[itr] + "");
                    Match match_Constant = constants_Reg.Match(lineChar[itr] + "");
                    Match match_Operator = operators_Reg.Match(lineChar[itr] + "");
                    Match match_Special = special_Reg.Match(lineChar[itr] + "");

                    if (match_Variable.Success || match_Constant.Success)
                    {
                        tempArray.Add(lineChar[itr]);
                    }

                    if (lineChar[itr].Equals(' '))
                    {
                        if (tempArray.Count != 0)
                        {
                            String fin = new string(tempArray.ToArray());
                            finalArrayc.Add(fin);
                            tempArray.Clear();
                        }
                    }

                    if (match_Operator.Success || match_Special.Success)
                    {
                        if (tempArray.Count != 0)
                        {
                            String fin = new string(tempArray.ToArray());
                            finalArrayc.Add(fin);
                            tempArray.Clear();
                        }
                        finalArrayc.Add(lineChar[itr].ToString());
                    }
                }

                // Process the remaining lexemes if any
                if (tempArray.Count != 0)
                {
                    String fina = new string(tempArray.ToArray());
                    finalArrayc.Add(fina);
                    tempArray.Clear();
                }

                // Looping through all the lexemes of the current line
                foreach (var lexeme in finalArrayc)
                {
                    Match match_Operators = operators_Reg.Match(lexeme);
                    Match match_Variables = variable_Reg.Match(lexeme);
                    Match match_Digits = constants_Reg.Match(lexeme);
                    Match match_Punctuations = special_Reg.Match(lexeme);

                    if (match_Operators.Success)
                    {
                        Console.Write("< op, " + lexeme + "> ");
                    }
                    else if (match_Digits.Success)
                    {
                        Console.Write("< digit, " + lexeme + "> ");
                    }
                    else if (match_Punctuations.Success)
                    {
                        Console.Write("< punc, " + lexeme + "> ");
                    }
                    else if (match_Variables.Success)
                    {
                        if (!keywordList.Contains(lexeme)) // is a variable
                        {
                            Console.Write("< var, " + lexeme + "> ");
                        }
                        else // is a keyword
                        {
                            Console.Write("< keyword, " + lexeme + "> ");
                        }
                    }
                }
                Console.WriteLine();
                finalArrayc.Clear();
            }
            Console.ReadKey();
        }
    }
    
}